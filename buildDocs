#!/usr/bin/env bash

### OPTIONS FOR THE SCRIPT

# set this to 'yes' to force a new commit and push
force_build='no'

# the GitHub token for authentication
gh_token='[REMOVED FOR SECURITY]'

# the GitHub username for authentication
gh_username='fusor-docs-machine-user'

### END SCRIPT OPTIONS

# how to print colored text from https://stackoverflow.com/a/5947802/16886597
info='[\033[1;34mINFO\033[0m]'
error='[\033[0;31mERROR\033[0m]'

printError () { printf "${error} $1\n"; }
printInfo  () { printf "${info} $1\n";  }

# note the current directory of the script
# this one-liner is from https://stackoverflow.com/a/246128/16886597
script_dir="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# check is a few key things are installed
printInfo "Checking if Maven, JavaDoc, and Minify are installed"
# check if Maven installed

# get the version, but hide all output
mvn -version > /dev/null 2>&1

# if it worked, the exit code will be zero
if [ "$?" = "0" ]; then
    printInfo "Maven installed. All good"
else
    # but if the exit code is not zero, something went wrong
    printError "Maven not installed. Exiting."
    exit 1
fi

# check if JavaDoc installed

# get the version, but hide all output
javadoc --version > /dev/null 2>&1

# if it worked, the exit code will be zero
if [ "$?" = "0" ]; then
    printInfo "JavaDoc installed. All good"
else
    # but if the exit code is not zero, something went wrong
    printError "JavaDoc not installed. Exiting."
    exit 1
fi

# check if Minify installed

# get the version, but hide all output
minify --version > /dev/null 2>&1

# if it worked, the exit code will be zero
if [ "$?" = "0" ]; then
    printInfo "Minify installed. All good"
else
    # but if the exit code is not zero, something went wrong
    printError "Minify not installed. Exiting."
    exit 1
fi

printInfo "Pulling the latest changes from GitHub"

old_hash="$(tar cf - --absolute-names -C ${script_dir} --mtime='1970-01-01' ${script_dir}/FusorControlServer | sha1sum)"

# git -C sets the working directory for the git pull
# this allows us to run the script from outside of
# where the script is
git -C "${script_dir}/" pull > /dev/null || {
    printError "Pulling changes from Github failed. Exiting."
    exit 1
}

if [ "$force_build" = "yes" ]; then
    touch "${script_dir}/FusorControlServer/tmp.weiwXWcxdN"
fi

# exit if no changes have been made
if [ "$old_hash" = "$(tar cf - --absolute-names -C ${script_dir} --mtime='1970-01-01' ${script_dir}/FusorControlServer | sha1sum)" ]; then
    printInfo "No new changes to Java source code. Exiting."
    exit 0
fi

if [ "$force_build" = "yes" ]; then
    rm "${script_dir}/FusorControlServer/tmp.weiwXWcxdN"
fi

cd "${script_dir}/FusorControlServer"

# compile the source code
printInfo "Compiling the source code"
mvn --no-transfer-progress --quiet compile || {
    printError "Compiling source code failed. Exiting."
    exit 1
}

# render the JavaDoc
printInfo 'Rendering the JavaDoc'
mvn --no-transfer-progress --quiet javadoc:javadoc | grep --invert-match 'Generating'

# See https://askubuntu.com/a/1370608/1438484 for what this does
if [ "${PIPESTATUS[0]}" != "0" ]; then
    printInfo "Rendering the JavaDoc failed. Exiting."
    exit 1
fi


cd "${script_dir}/"

printInfo "Copying documentation to proper output folder"
rm -rf "${script_dir}/docs"
mkdir "${script_dir}/docs"

cp -r "${script_dir}/FusorControlServer/target/site/apidocs/"* "${script_dir}/docs/"

# Automatically minify the output
#
# this is to prevent JavaDoc from embeding the date build
# into the output, which would potentially trigger it to
# re-build, even if no changes have been made
find "${script_dir}/docs" -type f -name "*.html" -exec minify --html-keep-conditional-comments --html-keep-default-attrvals --html-keep-document-tags --html-keep-end-tags {} -o {} \;

printInfo "Pushing changes to GitHub"

git add "${script_dir}/docs"
git commit -m "[AUTOMATED] Update docs" -m "This commit + push was ran by an automated script. If you encounter issues, contact @CoconutMacaroon on GitHub. My Eastside Prep email is avedbrat@eastsideprep.org."

# The format for this URL is 
# https://<username>:<password or token>@github.com/<repo author>/<repo>
git push "https://${gh_username}:${gh_token}@github.com/EastsidePreparatorySchool/FusorControl"
